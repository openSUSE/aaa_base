#!/bin/bash
#
# Run this script in C-Locale, or some tools will fail.
export LC_ALL=C
# /boot should be the first directory.  This increases the probability, that
# lilo stuff lies before 1024 cyl.
mkdir -p boot
#
# make sure, tmp directories do exist
#
for i in /tmp /var/tmp ; do
    test -d $i || {
        if test -L $i ; then
            echo "Error! $i is a dangling symlink."
            echo
            ls -l $i
            echo
            echo "To avoid big problems this link has to be deleted and a directory"
            echo "will be created.  Remember to fix it after installation."
            echo
            rm -f $i
        elif test -f $i ; then
            echo "$i is a file.  This makes no sense.  Moving it to $i.save."
            mv -v $i $i.save
        fi
        mkdir -p $i
    }
done

#
# we have several local files, that changed over the time.  Check the
# existing one, if they contain real data.  If not, delete them.
#
for LOCALFILE in /root/bin/cron.daily.local \
		/etc/init.d/boot.local \
		/etc/init.d/after.local \
		/etc/init.d/before.local \
		/etc/init.d/halt.local \
		/usr/sbin/usradd.local \
		/usr/sbin/usrdel.local \
		/usr/sbin/userdel.local ; do
    test -f $LOCALFILE || continue
    LOCALFILE_CONTAINS_DATA=false
    while read LINE ; do
        case "$LINE" in
          "#"*)
          ;;
          "echo "*">"*)
            LOCALFILE_CONTAINS_DATA=true
          ;;
          "echo "*)
          ;;
          ". /etc/rc.config")
          ;;
          "exit "*)
          ;;
          "")
          ;;
          *)
            LOCALFILE_CONTAINS_DATA=true
          ;;
        esac
    done < $LOCALFILE
    test "$LOCALFILE_CONTAINS_DATA" = false && rm -f $LOCALFILE
done
mkdir -p /etc/init.d
echo "#! /bin/sh
#
# Copyright (c) 2002 SuSE Linux AG Nuernberg, Germany.  All rights reserved.
#
# Author: Werner Fink, 1996
#         Burchard Steinbild, 1996
#
# /etc/init.d/boot.local
#
# script with local commands to be executed from init on system startup
#
# Here you should add things, that should happen directly after booting
# before we're going to the first run level.
#
# Please note that the use of this script is deprecated and should be
# avoided for starting commands. You should consider creating a dedicated
# systemd service instead.
#
" > /etc/init.d/boot.local.new
test -e /etc/init.d/boot.local || mv /etc/init.d/boot.local.new /etc/init.d/boot.local
rm -f /etc/init.d/boot.local.new
chmod 744 /etc/init.d/boot.local
echo "#! /bin/sh
#
# Copyright (c) 2002 SuSE Linux AG Nuernberg, Germany.  All rights reserved.
#
# Author: Werner Fink, 1998
#         Burchard Steinbild, 1998
#
# /etc/init.d/halt.local
#
# script with local commands to be executed from init on system shutdown
#
# Here you should add things, that should happen directly before shuting
# down.
#
# Please note that the use of this script is deprecated and should be
# avoided for starting commands. You should consider creating a dedicated
# systemd service instead.
#
" > /etc/init.d/halt.local.new
test -e /etc/init.d/halt.local || mv /etc/init.d/halt.local.new /etc/init.d/halt.local
rm -f /etc/init.d/halt.local.new
chmod 744 /etc/init.d/halt.local
echo "#! /bin/sh
#
# Copyright (c) 2010 SuSE LINUX Products GmbH, Germany.  All rights reserved.
#
# Author: Werner Fink, 2010
#
# /etc/init.d/after.local
#
# script with local commands to be executed from init after all scripts
# of a runlevel have been executed.
#
# Here you should add things, that should happen directly after
# runlevel has been reached.
#
# Please note that the use of this script is deprecated and should be
# avoided for starting commands. You should consider creating a dedicated
# systemd service instead.
#
" > /etc/init.d/after.local.new
test -e /etc/init.d/after.local || mv /etc/init.d/after.local.new /etc/init.d/after.local
rm -f /etc/init.d/after.local.new
chmod 744 /etc/init.d/after.local

test -e /etc/init.d/before.local && {
grep -q "not supported by systemd" /etc/init.d/before.local || {
echo "# this file is not supported by systemd and the content will probably not be run during bootup" >> /etc/init.d/before.local
}
}
mkdir -p /etc
for LINK in /usr/X11R6/lib/X11 /var/X11R6/lib/fonts /usr/lib/mgetty+sendfax \
    /usr/man/cat? /usr/X11R6/man/cat? /usr/openwin/man/cat? /usr/lib/news ; do
    if test -L $LINK ; then
        echo "Found forbidden/oldish Link: $LINK ...deleting"
        rm -f $LINK
    fi
done

if test -f /root/.gnupg/secring.gpg ; then
  cp -a /root/.gnupg/secring.gpg /root/.gnupg/secring.gpg.aaa_save
fi

# fate 314974: port tmpdir parameters from /etc/sysconfig/cron to systemd config

CONFFILE=/etc/tmpfiles.d/tmp.conf

# we don't take action if /etc/sysconfig/cron is not present or nothing is set
if [ -f /etc/sysconfig/cron ]; then
   . /etc/sysconfig/cron
   if [ -n "$MAX_DAYS_IN_TMP" ] || [ -n "$LONG_TMP_DIRS_TO_CLEAR" ] || [ -n "$CLEAR_TMP_DIRS_AT_BOOTUP" ]; then

# we need at least a skeleton of tmp.conf
      if [ ! -f $CONFFILE ]; then
         if [ -f /usr/lib/tmpfiles.d/tmp.conf ]; then
            cp /usr/lib/tmpfiles.d/tmp.conf $CONFFILE
         else
            echo "#  This file is part of systemd.
                  #
                  #  systemd is free software; you can redistribute it and/or modify it
                  #  under the terms of the GNU Lesser General Public License as published by
                  #  the Free Software Foundation; either version 2.1 of the License, or
                  #  (at your option) any later version.

                  # See tmpfiles.d(5) for details

                  # Clear tmp directories separately, to make them easier to override
                  # SUSE policy: we don't clean those directories
                  d /tmp 1777 root root -
                  d /var/tmp 1777 root root -

                  # Exclude namespace mountpoints created with PrivateTmp=yes
                  x /tmp/systemd-private-%b-*
                  X /tmp/systemd-private-%b-*/tmp
                  x /var/tmp/systemd-private-%b-*
                  X /var/tmp/systemd-private-%b-*/tmp
                  "  | sed 's/^ *//g' > $CONFFILE
         fi
      fi

# check for age parameter in /etc/sysconfig/cron
      if [ "${#MAX_DAYS_IN_TMP}" -gt 0 ] && [ "${MAX_DAYS_IN_TMP}" -gt 0 ]; then
         ISINTTMP=$(test "$MAX_DAYS_IN_TMP" -eq "$MAX_DAYS_IN_TMP" 2>/dev/null ; echo $?)
         if [ "$ISINTTMP" -eq 0 ]; then
            for DIR in $TMP_DIRS_TO_CLEAR; do
               DIRENT=$(sed -n "\c^d $DIR cp" $CONFFILE)
# if there is already an directory entry, use it, otherwise create one
               if [ -n "$DIRENT" ]; then
                  AGE=`echo $DIRENT | cut -d " " -f 6`
                  if [ $AGE == "-" ] && [ "$MAX_DAYS_IN_TMP" -gt 0 ]; then
                     MODENT+=$(sed -n "\c^d $DIR cs/-/"$MAX_DAYS_IN_TMP"d/p" $CONFFILE | sed 's/^d/\\nd/')
                  else
                     MODENT+=$(echo $DIRENT | sed 's/^d/\\nd/')
                  fi
               else
                  MODENT+=$(echo "\nd $DIR 1777 root root "$MAX_DAYS_IN_TMP"d")
               fi
            done
# if no directory is given default to /tmp
            if [ ${#TMP_DIRS_TO_CLEAR} -eq 0 ]; then
               MODENT+=$(echo "\nd /tmp 1777 root root "$MAX_DAYS_IN_TMP"d")
            fi
         fi
      fi

# address secondary directory statement
      if [ -n  "$LONG_TMP_DIRS_TO_CLEAR" ]; then
         : ${MAX_DAYS_IN_LONG_TMP:=0}
         ISINTTMP=$(test $MAX_DAYS_IN_LONG_TMP -eq $MAX_DAYS_IN_LONG_TMP 2>/dev/null ; echo $?)
         if [ "$ISINTTMP" -eq 0 ]; then
            for DIR in $LONG_TMP_DIRS_TO_CLEAR; do
               DIRENT=$(sed -n "\c^d $DIR cp" $CONFFILE)
               if [ -n "$DIRENT" ]; then
                  AGE=$(echo $DIRENT | cut -d " " -f 6)
                  if [ $AGE == "-" ] && [ "$MAX_DAYS_IN_LONG_TMP" -gt 0 ]; then
                     MODENT+=$(sed -n "\c^d $DIR cs/-/"$MAX_DAYS_IN_LONG_TMP"d/p" $CONFFILE | sed 's/^d/\\nd/')
                  else
                     MODENT+=$(echo $DIRENT | sed 's/^d/\\nd/')
                  fi
               else
                  if [ "$MAX_DAYS_IN_LONG_TMP" -gt 0 ]; then
                     MODENT+=$(echo "\nd $DIR 1777 root root "$MAX_DAYS_IN_LONG_TMP"d")
                  else
                     MODENT+=$(echo "\nd $DIR 1777 root root -")
                  fi
               fi
            done
         fi
      fi

# keep additional directory entries that have not been covered yet
      for ENTRY in $(sed -n '/^d\ \//p' $CONFFILE | cut -d " " -f 2); do
           if [[ ! "$MODENT" =~ "d $ENTRY " ]]; then
              MODENT+=$(sed -n "\c^d $ENTRY cp" $CONFFILE | sed 's/^d/\\nd/')
           fi
      done

      MODFILE=$(mktemp)

      sed -e '/^d\ \//d' -e '/^R\ \//d' -e '/# Clear tmp directories/,+2d' $CONFFILE | sed -re '$!N;/^\n$/!P;D' > $MODFILE
      echo -e "\n# Clear tmp directories separately, to make them easier to override" >> $MODFILE
      echo "# SUSE policy: we don't clean those directories" >> $MODFILE
      echo -e "$MODENT" >> $MODFILE

# address directories to be cleared at system boot
      : ${TMP_DIRS_TO_CLEAR:=/tmp}
      : ${CLEAR_TMP_DIRS_AT_BOOTUP:=no}
      REMENT=$(sed -n '/^R\ \//s/^/ /p' $CONFFILE)
      CLEAR_DIRS="$TMP_DIRS_TO_CLEAR"
      if [ "${CLEAR_TMP_DIRS_AT_BOOTUP:0:1}" == "/" ]; then
         CLEAR_DIRS="$CLEAR_TMP_DIRS_AT_BOOTUP"
         CLEAR_TMP_DIRS_AT_BOOTUP=yes
      fi
      if test "$CLEAR_TMP_DIRS_AT_BOOTUP" = yes; then
         for DIR in $CLEAR_DIRS; do
            if [[ ! "$REMENT" =~ "R $DIR/*" ]]; then
               REMENT+=`echo " R $DIR/*"`
            fi
         done
      fi
      echo -e "$REMENT" | sed -e 's/ R/\nR/g' | sed '/^$/d' >> $MODFILE

# take care of owner based exclude statements
      if [ ${#OWNER_TO_KEEP_IN_TMP} -gt 0 ]; then
          if [ "${#MAX_DAYS_IN_TMP}" -gt 0 ] && [ "${MAX_DAYS_IN_TMP}" -gt 0 ]; then
             TMPDIRS=$(echo -n "${TMP_DIRS_TO_CLEAR:-/tmp}")
          fi

          TMPDIRS+=$(echo -n " $LONG_TMP_DIRS_TO_CLEAR")

          for i in $TMPDIRS; do
              EXCLUDENT=$(sed -n "\c^x $i.* -cp" $CONFFILE)
              if [[ ! "$EXCLUDENT" =~ "x $i/*" ]]; then
                  echo "x $i/* - - - - $OWNER_TO_KEEP_IN_TMP" >> $MODFILE
              fi
          done
      fi

      mv $MODFILE $CONFFILE

# clear old variables from /etc/sysconfig/cron
      OLDVARS=$(sed '1!G;h;$!d' /etc/sysconfig/cron | sed  -n '/^CLEAR_TMP_DIRS_AT_BOOTUP/,/Path:.*System\/Cron$/p')
      if [ ${#OLDVARS} -gt 0 ]; then
         MODFILE2=$(mktemp)
         echo "## The Parameters MAX_DAYS_IN_TMP, MAX_DAYS_IN_LONG_TMP, TMP_DIRS_TO_CLEAR,
         ## LONG_TMP_DIRS_TO_CLEAR, CLEAR_TMP_DIRS_AT_BOOTUP and OWNER_TO_KEEP_IN_TMP have
         ## been converted to systemd-tmpfiles settings in $CONFFILE.
         ## Please check and modify to your needs.
         ## See 'man tmpfiles.d' for details.
         " | sed 's/^ *//g' > $MODFILE2
         sed '1!G;h;$!d' /etc/sysconfig/cron | sed '/^CLEAR_TMP_DIRS_AT_BOOTUP/,/Path:.*System\/Cron$/d' | sed '1!G;h;$!d' >> $MODFILE2
         mv $MODFILE2 /etc/sysconfig/cron
      fi
   fi
fi
