#!/bin/bash
#
# Run this script in C-Locale, or some tools will fail.
export LC_ALL=C
# /boot should be the first directory.  This increases the probability, that
# lilo stuff lies before 1024 cyl.
mkdir -p boot
#
# make sure, tmp directories do exist
#
for i in /tmp /var/tmp ; do
    test -d $i || {
        if test -L $i ; then
            echo "Error! $i is a dangling symlink."
            echo
            ls -l $i
            echo
            echo "To avoid big problems this link has to be deleted and a directory"
            echo "will be created.  Remember to fix it after installation."
            echo
            rm -f $i
        elif test -f $i ; then
            echo "$i is a file.  This makes no sense.  Moving it to $i.save."
            mv -v $i $i.save
        fi
        mkdir -p $i
    }
done
#
# now create a var/adm/fillup-templates/passwd.aaa_base.
# If etc/passwd does not exist, copy
# var/adm/fillup-templates/passwd.aaa_base to etc/passwd.
# deleted db2 groups and users were uids 46,47,48 and gids 46,47,48
#
mkdir -p /etc
mkdir -p /var/adm/fillup-templates
echo "root:x:0:0:root:/root:/bin/bash
lp:x:4:7:Printing daemon:/var/spool/lpd:/bin/bash
mail:x:8:12:Mailer daemon:/var/spool/clientmqueue:/bin/false
wwwrun:x:30:8:WWW daemon apache:/var/lib/wwwrun:/bin/false
ftp:x:40:49:FTP account:/srv/ftp:/bin/bash
nobody:x:65534:65533:nobody:/var/lib/nobody:/bin/bash" \
 > /var/adm/fillup-templates/passwd.aaa_base

echo "root:x:0:
sys:x:3:
lp:x:7:
www:x:8:
mail:x:12:
shadow:x:15:
dialout:x:16:
utmp:x:22:
ftp:x:49:
users:x:100:
nobody:x:65533:
nogroup:x:65534:nobody" > /var/adm/fillup-templates/group.aaa_base

rm -f /var/adm/fillup-templates/shadow.aaa_base
while read LINE ; do
  case $LINE in
    root*)
	echo "root::$(($(date '+%s')/86400))::::::" \
		>> /var/adm/fillup-templates/shadow.aaa_base
	;;
    *)
	echo "${LINE%%%%:*}:*:$(($(date '+%s')/86400))::::::" \
		>> /var/adm/fillup-templates/shadow.aaa_base
	;;
  esac
done < /var/adm/fillup-templates/passwd.aaa_base


for file in passwd group ; do
 if test -f /etc/$file ; then
  # like fillup, but : is the only separator
  rm -f /etc/$file.add
  sort -k 1,1 -t: -u /etc/$file /var/adm/fillup-templates/$file.aaa_base \
  | sort -k 1,1 -t: /etc/$file - | uniq -u > /etc/$file.add
  cat /etc/$file.add >> /etc/$file
  rm -f /etc/$file.add
  # fix permissions if this script is called with strange umask
  chmod 644 /etc/$file
 else
  cat /var/adm/fillup-templates/$file.aaa_base > /etc/$file
 fi
done

#
# we have several local files, that changed over the time.  Check the
# existing one, if they contain real data.  If not, delete them.
#
for LOCALFILE in /root/bin/cron.daily.local \
		/etc/init.d/boot.local \
		/etc/init.d/after.local \
		/etc/init.d/before.local \
		/etc/init.d/halt.local \
		/usr/sbin/usradd.local \
		/usr/sbin/usrdel.local \
		/usr/sbin/userdel.local ; do
    test -f $LOCALFILE || continue
    LOCALFILE_CONTAINS_DATA=false
    while read LINE ; do
        case "$LINE" in
          "#"*)
          ;;
          "echo "*">"*)
            LOCALFILE_CONTAINS_DATA=true
          ;;
          "echo "*)
          ;;
          ". /etc/rc.config")
          ;;
          "exit "*)
          ;;
          "")
          ;;
          *)
            LOCALFILE_CONTAINS_DATA=true
          ;;
        esac
    done < $LOCALFILE
    test "$LOCALFILE_CONTAINS_DATA" = false && rm -f $LOCALFILE
done
mkdir -p /etc/init.d
echo "#! /bin/sh
#
# Copyright (c) 2002 SuSE Linux AG Nuernberg, Germany.  All rights reserved.
#
# Author: Werner Fink, 1996
#         Burchard Steinbild, 1996
#
# /etc/init.d/boot.local
#
# script with local commands to be executed from init on system startup
#
# Here you should add things, that should happen directly after booting
# before we're going to the first run level.
#
# Please note that the use of this script is deprecated and should be
# avoided for starting commands. You should consider creating a dedicated
# systemd service instead.
#
" > /etc/init.d/boot.local.new
test -e /etc/init.d/boot.local || mv /etc/init.d/boot.local.new /etc/init.d/boot.local
rm -f /etc/init.d/boot.local.new
chmod 744 /etc/init.d/boot.local
echo "#! /bin/sh
#
# Copyright (c) 2002 SuSE Linux AG Nuernberg, Germany.  All rights reserved.
#
# Author: Werner Fink, 1998
#         Burchard Steinbild, 1998
#
# /etc/init.d/halt.local
#
# script with local commands to be executed from init on system shutdown
#
# Here you should add things, that should happen directly before shuting
# down.
#
# Please note that the use of this script is deprecated and should be
# avoided for starting commands. You should consider creating a dedicated
# systemd service instead.
#
" > /etc/init.d/halt.local.new
test -e /etc/init.d/halt.local || mv /etc/init.d/halt.local.new /etc/init.d/halt.local
rm -f /etc/init.d/halt.local.new
chmod 744 /etc/init.d/halt.local
echo "#! /bin/sh
#
# Copyright (c) 2010 SuSE LINUX Products GmbH, Germany.  All rights reserved.
#
# Author: Werner Fink, 2010
#
# /etc/init.d/after.local
#
# script with local commands to be executed from init after all scripts
# of a runlevel have been executed.
#
# Here you should add things, that should happen directly after
# runlevel has been reached.
#
# Please note that the use of this script is deprecated and should be
# avoided for starting commands. You should consider creating a dedicated
# systemd service instead.
#
" > /etc/init.d/after.local.new
test -e /etc/init.d/after.local || mv /etc/init.d/after.local.new /etc/init.d/after.local
rm -f /etc/init.d/after.local.new
chmod 744 /etc/init.d/after.local

test -e /etc/init.d/before.local && {
grep -q "not supported by systemd" /etc/init.d/before.local || {
echo "# this file is not supported by systemd and the content will probably not be run during bootup" >> /etc/init.d/before.local
}
}
mkdir -p /etc
for LINK in /usr/X11R6/lib/X11 /var/X11R6/lib/fonts /usr/lib/mgetty+sendfax \
    /usr/man/cat? /usr/X11R6/man/cat? /usr/openwin/man/cat? /usr/lib/news ; do
    if test -L $LINK ; then
        echo "Found forbidden/oldish Link: $LINK ...deleting"
        rm -f $LINK
    fi
done

if test -f /root/.gnupg/secring.gpg ; then
  cp -a /root/.gnupg/secring.gpg /root/.gnupg/secring.gpg.aaa_save
fi

# fate 314974: port tmpdir removal parameters from /etc/sysconfig/cron to systemd-tmpfiles settings

# we don't take action if /etc/sysconfig/cron is not present
if [ -f /etc/sysconfig/cron ]; then
   . /etc/sysconfig/cron

#write the directories and removal intervals for all tmpdirs specified
   if [ "${MAX_DAYS_IN_TMP:-0}" -gt 0 -o -n "$TMP_DIRS_TO_CLEAR" ]; then
      for DIR in $TMP_DIRS_TO_CLEAR; do
         if [ "$MAX_DAYS_IN_TMP" -gt 0 ]; then
            DIRENT+=`echo "\nd $DIR 1777 root root "$MAX_DAYS_IN_TMP"d"`
         elif [ "$MAX_DAYS_IN_TMP" -eq 0 ]; then
            DIRENT+=`echo "\nd $DIR 1777 root root -"`
         fi
      done
#if no tmpdirs are specified but we have a cleanup interval, default to /tmp
      if [ -z "$TMP_DIRS_TO_CLEAR" ] && [ "${MAX_DAYS_IN_TMP:-0}" -gt 0 ]; then
         DIRENT+=`echo "\nd /tmp 1777 root root "$MAX_DAYS_IN_TMP"d"`
      fi
   fi

#write the directories and removal intervals for all additional tmpdirs specified
   if [ "${MAX_DAYS_IN_LONG_TMP:-0}" -gt 0 -o -n "$LONG_TMP_DIRS_TO_CLEAR" ]; then
      for DIR in $LONG_TMP_DIRS_TO_CLEAR; do
         if [ "$MAX_DAYS_IN_LONG_TMP" -gt 0 ]; then
            DIRENT+=`echo "\nd $DIR 1777 root root "$MAX_DAYS_IN_LONG_TMP"d"`
         elif [ "$MAX_DAYS_IN_LONG_TMP" -eq 0 ]; then
            DIRENT+=`echo "\nd $DIR 1777 root root -"`
         fi
      done
   fi

   echo "#convert tmpfile settings from /etc/sysconfig/cron to systemd" > /usr/lib/tmpfiles.d/sysconfig.conf
   echo -e "$DIRENT" >> /usr/lib/tmpfiles.d/sysconfig.conf

# address directories to be cleared at system boot
   : ${TMP_DIRS_TO_CLEAR:=/tmp}
   : ${CLEAR_TMP_DIRS_AT_BOOTUP:=no}
   CLEAR_DIRS="$TMP_DIRS_TO_CLEAR"
   if [ "${CLEAR_TMP_DIRS_AT_BOOTUP:0:1}" == "/" ]; then
      CLEAR_DIRS="$CLEAR_TMP_DIRS_AT_BOOTUP"
      CLEAR_TMP_DIRS_AT_BOOTUP=yes
   fi
   if test "$CLEAR_TMP_DIRS_AT_BOOTUP" = yes; then
      for DIR in $CLEAR_DIRS; do
         if [[ ! "$REMENT" =~ "R $DIR/*" ]]; then
            REMENT+=`echo " R $DIR/*"`	
         fi
      done
   fi
   echo -e "$REMENT" | sed -e 's/ R/\nR/g' | sed '/^$/d' >> /usr/lib/tmpfiles.d/sysconfig.conf

# take care of ownerkeep parameters
# owner based keeping of files is not implemented in systemd, so we need to run a script
# that creates keep entries before each scheduled removal run
   OWNER_TO_KEEP_IN_TMP=`sed -n '/^OWNER_TO_KEEP_IN_TMP/p' /etc/sysconfig/cron`
   if [ -n "$OWNER_TO_KEEP_IN_TMP" ]; then
      TMPDIR_TO_SEARCH_OWNER=`sed -n 's/^TMP_DIRS_TO_CLEAR/TMPDIR_TO_SEARCH_OWNER/p' /etc/sysconfig/cron`
      echo "
      #########Moved sysconfig variables, do not delete leading hashes!#########
      ## Type:        string
      ## Default:     root
      #
      # In OWNER_TO_KEEP_IN_TMP, you can specify, whose files shall not be deleted.
      #
      #${OWNER_TO_KEEP_IN_TMP:-OWNER_TO_KEEP_IN_TMP=\"root\"}
      
      ## Type:         string
      ## Default:      ""
      #
      # To which of the TMP directories should OWNER_TO_KEEP_IN_TMP apply.
      # If empty it defaults to all directory entries in /usr/lib/tmpfiles.d/sysconfig.conf.
      #${TMPDIR_TO_SEARCH_OWNER:-TMPDIR_TO_SEARCH_OWNER=\"\"}
      ##########################################################################
      " | sed 's/^ *//g' >> /usr/lib/tmpfiles.d/sysconfig.conf
   fi

# clear old variables from /etc/sysconfig/cron
   OLDVARS=`sed '1!G;h;$!d' /etc/sysconfig/cron | sed  -n '/^CLEAR_TMP_DIRS_AT_BOOTUP/,/Path:.*System\/Cron$/p'`
   if [ ${#OLDVARS} -gt 0 ]; then
cat <<-'EOF' | sed 's/^ *//g' > /etc/sysconfig/cron.tmp
      ## The Parameters MAX_DAYS_IN_TMP, MAX_DAYS_IN_LONG_TMP, TMP_DIRS_TO_CLEAR, 
      ## LONG_TMP_DIRS_TO_CLEAR, CLEAR_TMP_DIRS_AT_BOOTUP and OWNER_TO_KEEP_IN_TMP have 
      ## been converted to systemd-tmpfiles settings in /usr/lib/tmpfiles.d/sysconfig.conf.
      ## Please check and modify to your needs.
      ## See 'man tmpfiles.d' for details.

EOF

      sed '1!G;h;$!d' /etc/sysconfig/cron | sed '/^CLEAR_TMP_DIRS_AT_BOOTUP/,/Path:.*System\/Cron$/d' | sed '1!G;h;$!d' >> /etc/sysconfig/cron.tmp
      mv /etc/sysconfig/cron.tmp /etc/sysconfig/cron
   fi
fi
